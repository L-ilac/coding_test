# 수행 시간 측정 코드
import time
start = time.time()  # 시작 시간
# 실행될 코드가 들어갈 부분
end = time.time()  # 종료 시간
performance_time = end - start  # 총 걸린 시간


# Data Type of python

1. Number: 정수(Integer), 실수(Real Number)

지수표현 방식: 1000 -> 1e3 (1 * (10 ^ 3))

반올림 함수: round(실수형 데이터, 반올림하고자 하는 위치 - 1(default=0(첫째자리에서 반올림)))

파이썬에서 나누기 연산자는 연산 결과를 실수형으로 처리한다.
//: 몫 연산자
**: 거듭제곱 연산자 x ** y = > x ^ y


# list (Array or Table 로도 불림)
배열의 기능을 포함하는 자료형으로, 내부적으로 연결리스트 자료구조를 채택한다.
cpp의 STL vector 와 유사하다.

리스트 초기화 팁
a = [0] * N(리스트 크기)

(중요 Tip) 리스트 컴프리헨션
**** array = [i for i in range(20) if i % 2 == 1]  # 0~19에서 홀수 리스트
for문이 돌때마다 해당하는 i 값을 리스트에 저장

(중요 Tip) 2차원 리스트 초기화(2차원 리스트 초기화는 무조건 이걸로 해야함)
**** array = [[0] * m for _ in range(n)] 크기 m의 0으로 초기화된 1차원 리스트를 n개 만큼 넣어서 2차원 리스트를 만듦.

_(언더바) 의 역할? -> for문에서 반복을 수행하되 반복을 위한 변수(주로 i)의 값을 무시하고자 할 때 사용

리스트 관련 메서드: append(), sort(), reverse(), insert(), count(), remove()

sort(): 오름차순 정렬, sort(reverse=True): 내림차순 정렬
count(특정값): 리스트안에 특정값을 가지는 데이터 갯수 반환
remove(특정값): 특정값을 리스트에서 제거, 중복 데이터 존재시 1개만 제거
insert(인덱스, 삽입값): 특정 인덱스 위치에 값 삽입

if i not in list -> list안에 i 가 없다면.... (in은 안에 있다면...)

# tuple
리스트와 비슷하지만 차이가 있음
1. 한번 선언된 값을 변경할 수 없음(tuple[2]=1 < - 이런식의 대입 불가)
2. 대괄호 대신 소괄호() 사용 -> tuple = (1, 2, 3, 4, 5)

# dict
키와 값의 쌍을 데이터로 가지는 자료형, 내부적으로 해시 테이블을 이용함, 순서없음(인덱싱 불가)

data = dict()  # 딕셔너리 선언
data[key] = value  # 저장 방법 key와 value에는 또다른 자료형들이 올 수 있다.

딕셔너리 관련 메서드: keys(), values()

keys(): 딕셔너리의 키들만 뽑아서 리스트로 반환
values(): 딕셔너리의 값들만 뽑아서 리스트로 반환

# set
집합을 처리하기 위한 집합 자료형으로, 기본적으로 리스트 or 문자열을 이용해서 만든다.
1. 중복을 허용하지 않음.
2. 순서가 없음(인덱싱 불가)
3. 키가 존재하지 않고, 값 데이터만을 담음.

data = set([1, 2, 3, 4, 5]) or data = {1, 2, 3, 4, 5} 중괄호 이용하여 초기화

집합 자료형의 연산: 합집합(| ), 교집합(&), 차집합(-)
집합 자료형 관련 메서드: add(한 개), update([여러개]), remove()
update([1, 2, 3, 4]): 여러 개의 값을 한꺼번에 추가할 때 사용
